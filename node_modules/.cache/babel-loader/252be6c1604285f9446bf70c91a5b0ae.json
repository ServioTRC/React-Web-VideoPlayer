{"ast":null,"code":"import _objectSpread from \"/Users/servio/Documents/GitHub/React-Web-VideoPlayer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/servio/Documents/GitHub/React-Web-VideoPlayer/src/components/containers/BogoPlayer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport Video from '../Video';\nimport Playlist from '../containers/Playlist';\nimport StyledBogoPlayer from '../styles/StyledBogoPlayer';\nvar theme = {\n  bgcolor: \"#353535\",\n  bgcolorItem: \"#414141\",\n  bgcolorItemActive: \"#405c63\",\n  bgcolorPlay: \"#526d4e\",\n  border: \"none\",\n  borderPlayed: \"none\",\n  color: \"#fff\"\n};\nvar themeLight = {\n  bgcolor: \"#fff\",\n  bgcolorItem: \"#fff\",\n  bgcolorItemActive: \"#80a7b1\",\n  bgcolorPlay: \"#526d4e\",\n  border: \"1px solid #353535\",\n  borderPlayed: \"none\",\n  color: \"#353535\"\n};\n\nvar BogoPlayer = function BogoPlayer(props) {\n  var videos = JSON.parse(document.querySelector('[name=\"videos\"]').value);\n  var savedState = JSON.const[(state, setState)] = useState({\n    videos: videos.playlist,\n    activeVideo: videos.playlist[0],\n    nightMode: true,\n    playlistId: videos.playlistId,\n    autoplay: false\n  });\n  useEffect(function () {\n    localStorage.setItem(\"\".concat(state.playlistId), JSON.stringify(_objectSpread({}, state)));\n  }, [state]);\n  useEffect(function () {\n    var videoId = props.match.params.activeVideo;\n\n    if (videoId !== undefined) {\n      var newActiveVideo = state.videos.findIndex(function (video) {\n        return video.id === videoId;\n      });\n      setState(_objectSpread({}, state, {\n        //Clone state\n        activeVideo: state.videos[newActiveVideo],\n        autoplay: props.location.autoplay\n      }));\n    } else {\n      props.history.push({\n        pathname: \"/\".concat(state.activeVideo.id),\n        autoplay: false\n      });\n    }\n  }, [props.match.params.activeVideo]);\n\n  var nightModeCallback = function nightModeCallback() {\n    setState(function (prevState) {\n      return _objectSpread({}, prevState, {\n        nightMode: !prevState.nightMode\n      });\n    });\n  };\n\n  var endCallback = function endCallback() {\n    var videoId = props.match.params.activeVideo;\n    var currentVideoIndex = state.videos.findIndex(function (video) {\n      return video.id === videoId;\n    });\n    var nextVideo = currentVideoIndex === state.videos.length - 1 ? 0 : currentVideoIndex + 1;\n    props.history.push({\n      pathname: \"\".concat(state.videos[nextVideo].id),\n      autoplay: false\n    });\n  };\n\n  var progressCallback = function progressCallback(event) {\n    if (event.playedSeconds > 10 && event.playedSeconds < 11) {\n      setState(_objectSpread({}, state, {\n        videos: state.videos.map(function (element) {\n          return element.id === state.activeVideo.id ? _objectSpread({}, element, {\n            played: true\n          }) : element;\n        })\n      }));\n    }\n  };\n\n  return React.createElement(ThemeProvider, {\n    theme: state.nightMode ? theme : themeLight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, state.videos !== null ? React.createElement(StyledBogoPlayer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Video, {\n    active: state.activeVideo,\n    autoplay: state.autoplay,\n    endCallback: endCallback,\n    progressCallback: progressCallback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Playlist, {\n    videos: state.videos,\n    active: state.activeVideo,\n    nightModeCallback: nightModeCallback,\n    nightMode: state.nightMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })) : null);\n};\n\nexport default BogoPlayer;","map":{"version":3,"sources":["/Users/servio/Documents/GitHub/React-Web-VideoPlayer/src/components/containers/BogoPlayer.js"],"names":["React","useState","useEffect","ThemeProvider","Video","Playlist","StyledBogoPlayer","theme","bgcolor","bgcolorItem","bgcolorItemActive","bgcolorPlay","border","borderPlayed","color","themeLight","BogoPlayer","props","videos","JSON","parse","document","querySelector","value","savedState","const","state","setState","playlist","activeVideo","nightMode","playlistId","autoplay","localStorage","setItem","stringify","videoId","match","params","undefined","newActiveVideo","findIndex","video","id","location","history","push","pathname","nightModeCallback","prevState","endCallback","currentVideoIndex","nextVideo","length","progressCallback","event","playedSeconds","map","element","played"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {ThemeProvider} from 'styled-components';\nimport Video from '../Video';\nimport Playlist from '../containers/Playlist';\nimport StyledBogoPlayer from '../styles/StyledBogoPlayer';\n\nconst theme = {\n    bgcolor: \"#353535\",\n    bgcolorItem: \"#414141\",\n    bgcolorItemActive: \"#405c63\",\n    bgcolorPlay: \"#526d4e\",\n    border: \"none\",\n    borderPlayed: \"none\",\n    color: \"#fff\"\n};\n\nconst themeLight = {\n    bgcolor: \"#fff\",\n    bgcolorItem: \"#fff\",\n    bgcolorItemActive: \"#80a7b1\",\n    bgcolorPlay: \"#526d4e\",\n    border: \"1px solid #353535\",\n    borderPlayed: \"none\",\n    color: \"#353535\"\n};\n\nconst BogoPlayer = props => {\n\n    const videos = JSON.parse(document.querySelector('[name=\"videos\"]').value);\n    const savedState = JSON.\n\n    const [state, setState] = useState({\n        videos: videos.playlist,\n        activeVideo: videos.playlist[0],\n        nightMode: true,\n        playlistId: videos.playlistId,\n        autoplay: false,\n    });\n\n    useEffect(\n        () => {\n            localStorage.setItem(`${state.playlistId}`, JSON.stringify({ ...state }));\n        },\n        [state]\n    );\n\n    useEffect(\n        () => {\n            const videoId = props.match.params.activeVideo;\n            if(videoId !== undefined){\n                const newActiveVideo = state.videos.findIndex(\n                    video => video.id === videoId\n                );\n                setState({\n                    ...state, //Clone state\n                    activeVideo: state.videos[newActiveVideo],\n                    autoplay: props.location.autoplay,\n                });\n            } else {\n                props.history.push({\n                    pathname: `/${state.activeVideo.id}`,\n                    autoplay: false\n                });\n            }\n        },\n        [props.match.params.activeVideo]\n    );\n\n    const nightModeCallback = () => {\n        setState(prevState => ({\n            ...prevState, \n            nightMode: !prevState.nightMode\n        }));\n    };\n\n    const endCallback = () => {\n        const videoId = props.match.params.activeVideo;\n        const currentVideoIndex = state.videos.findIndex(\n            video => video.id === videoId\n        );\n        const nextVideo = currentVideoIndex === state.videos.length - 1 ? 0 : currentVideoIndex + 1;\n        props.history.push({\n            pathname: `${state.videos[nextVideo].id}`,\n            autoplay: false\n        });\n    }\n\n    const progressCallback = event => {\n        if(event.playedSeconds > 10 && event.playedSeconds < 11){\n            setState({\n                ...state,\n                videos: state.videos.map(element => {\n                    return element.id === state.activeVideo.id ? \n                    {...element, played: true}\n                    : element;\n                })\n            })\n        }\n    }\n\n\n    return (\n        <ThemeProvider theme={state.nightMode ? theme : themeLight}>\n            {state.videos !== null ? (\n                <StyledBogoPlayer>\n                    <Video \n                        active={state.activeVideo}\n                        autoplay={state.autoplay}\n                        endCallback={endCallback}\n                        progressCallback={progressCallback}\n                    />\n                    <Playlist\n                        videos={state.videos}\n                        active={state.activeVideo}\n                        nightModeCallback={nightModeCallback}\n                        nightMode={state.nightMode}\n                    />\n                </StyledBogoPlayer>\n            ) : null}\n        </ThemeProvider>\n    );\n};\n\nexport default BogoPlayer;"]},"metadata":{},"sourceType":"module"}